{"ast":null,"code":"import _slicedToArray from \"/home/kenzo/\\xC1rea de Trabalho/Desktop/GitHub/GetRepo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kenzo/\\xC1rea de Trabalho/Desktop/GitHub/GetRepo/src/pages/Repository/index.js\";\nimport React, { Component } from 'react';\nimport api from '../../services/api';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Container from '../../components/Container';\nimport { Loading, Owner, Filter, IssueList, PageButton } from './styles';\nexport default class Repository extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      repository: {},\n      issues: [],\n      filters: [{\n        state: 'all',\n        label: 'Todas',\n        active: true\n      }, {\n        state: 'open',\n        label: 'Abertas',\n        active: false\n      }, {\n        state: 'closed',\n        label: 'Fechadas',\n        active: false\n      }],\n      filterIndex: 0,\n      page: 1,\n      loading: true\n    };\n\n    this.getFilterIndex = filterIndex => {\n      this.setState({\n        filterIndex\n      });\n    };\n\n    this.handlePages = async action => {\n      const page = this.state.page;\n      await this.setState({\n        page: action === 'back' ? page - 1 : page + 1\n      });\n      this.loadIssues();\n    };\n\n    this.loadIssues = e => {};\n  }\n\n  async componentDidMount() {\n    const match = this.props.match;\n    const repoName = decodeURIComponent(match.params.repository);\n    /*When you have 2 or more async processes that do not depends the end of a process to start your,\n      you can use the Promise.all that execute all the processes in the same time.\n      To get the return of each process you will need to create a array to receive then,\n      then order the return like the order of the processes. */\n\n    const _ref = await Promise.all([api.get(\"/repos/\".concat(repoName)), api.get(\"/repos/\".concat(repoName, \"/issues\"))]),\n          _ref2 = _slicedToArray(_ref, 2),\n          repository = _ref2[0],\n          issues = _ref2[1];\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          repository = _this$state.repository,\n          issues = _this$state.issues,\n          loading = _this$state.loading,\n          filters = _this$state.filters,\n          page = _this$state.page;\n\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Carregando\");\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Owner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Voltar aos reposit\\xF3rios\"), React.createElement(\"img\", {\n      src: repository.owner.avatar_url,\n      alt: repository.owner.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, repository.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, repository.description)), React.createElement(Filter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, filters.map(filter, index => React.createElement(\"button\", {\n      type: \"button\",\n      key: filter.label,\n      onClick: () => this.getFilterIndex(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, filter.state))), React.createElement(IssueList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, issues.map(issue => React.createElement(\"li\", {\n      key: String(issue.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: issue.user.avatar_url,\n      alt: issue.user.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: issue.html_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, issue.title), issue.labels.map(label => React.createElement(\"span\", {\n      key: String(label.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, label.name))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, issue.user.login))))), React.createElement(PageButton, {\n      page: page,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, page >= 2 && React.createElement(\"button\", {\n      onClick: () => this.handlePages('back'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Back\"), React.createElement(\"button\", {\n      onClick: () => this.handlePages('next'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \" Next\")));\n  }\n\n}\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      issues: PropTypes.string\n    })\n  }).isRequired\n};","map":{"version":3,"sources":["/home/kenzo/√Årea de Trabalho/Desktop/GitHub/GetRepo/src/pages/Repository/index.js"],"names":["React","Component","api","Link","PropTypes","Container","Loading","Owner","Filter","IssueList","PageButton","Repository","state","repository","issues","filters","label","active","filterIndex","page","loading","getFilterIndex","setState","handlePages","action","loadIssues","e","componentDidMount","match","props","repoName","decodeURIComponent","params","Promise","all","get","data","render","owner","avatar_url","login","name","description","map","filter","index","issue","String","id","user","html_url","title","labels","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport api from '../../services/api';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport Container from '../../components/Container'\nimport { Loading, Owner, Filter, IssueList, PageButton } from './styles';\n\nexport default class Repository extends Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({\n        issues: PropTypes.string,\n      }),\n    }).isRequired,\n  }\n\n  state = {\n    repository: {},\n    issues: [],\n    filters: [\n      { state: 'all', label: 'Todas', active: true },\n      { state: 'open', label: 'Abertas', active: false },\n      { state: 'closed', label: 'Fechadas', active: false },\n    ],\n    filterIndex: 0,\n    page: 1,\n    loading: true,\n  }\n\n  async componentDidMount() {\n    const { match } = this.props;\n\n    const repoName = decodeURIComponent(match.params.repository);\n\n    /*When you have 2 or more async processes that do not depends the end of a process to start your,\n      you can use the Promise.all that execute all the processes in the same time.\n      To get the return of each process you will need to create a array to receive then,\n      then order the return like the order of the processes. */\n    const [repository, issues] = await Promise.all([\n      api.get(`/repos/${repoName}`),\n      api.get(`/repos/${repoName}/issues`),\n    ])\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false,\n    })\n  }\n\n  getFilterIndex = filterIndex => {\n    this.setState({ filterIndex })\n  }\n\n  handlePages = async action => {\n    const { page } = this.state;\n\n    await this.setState({ page: action === 'back' ? page - 1 : page + 1 })\n\n    this.loadIssues();\n  }\n\n  loadIssues = e => {\n\n  }\n\n  render() {\n    const { repository, issues, loading, filters, page } = this.state;\n\n    if (loading) {\n      return <Loading>Carregando</Loading>\n    }\n\n    return (\n      <Container>\n        <Owner>\n          <Link to=\"/\">Voltar aos reposit√≥rios</Link>\n          <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n          <h1>{repository.name}</h1>\n          <p>{repository.description}</p>\n        </Owner>\n\n        <Filter>\n          {filters.map(filter, index => (\n            <button\n              type=\"button\"\n              key={filter.label}\n              onClick={() => this.getFilterIndex(index)}\n            >\n              {filter.state}\n            </button>\n          ))}\n        </Filter>\n\n        <IssueList>\n          {\n            issues.map(issue =>\n              (\n                <li key={String(issue.id)}>\n                  <img src={issue.user.avatar_url} alt={issue.user.login} />\n                  <div>\n                    <strong>\n                      <a href={issue.html_url}>{issue.title}</a>\n\n                      {issue.labels.map(label => (\n                        <span key={String(label.id)}>{label.name}</span>\n                      ))}\n                    </strong>\n                    <p>{issue.user.login}</p>\n                  </div>\n                </li>\n              ))\n          }\n        </IssueList>\n        <PageButton page={page}>\n          {page >= 2 && (<button onClick={() => this.handlePages('back')}>Back</button>)}\n          <button onClick={() => this.handlePages('next')}> Next</button>\n        </PageButton>\n      </Container >\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}