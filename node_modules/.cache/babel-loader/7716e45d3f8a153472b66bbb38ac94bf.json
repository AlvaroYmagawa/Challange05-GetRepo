{"ast":null,"code":"import _slicedToArray from \"/home/kenzo/\\xC1rea de Trabalho/Desktop/RocketSeat/GoStack08/Bootcamp/F03/First project Reactjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kenzo/\\xC1rea de Trabalho/Desktop/RocketSeat/GoStack08/Bootcamp/F03/First project Reactjs/src/pages/Repository/index.js\";\nimport React, { Component } from 'react';\nimport api from '../../services/api';\nimport PropTypes from 'prop-types';\nimport Container from '../../components/Container';\nimport { Loading, Owner } from './styles';\nexport default class Repository extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      repository: {},\n      issues: [],\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    const match = this.props.match;\n    const repoName = decodeURIComponent(match.params.repository);\n    /*When you have 2 or more async processes that do not depends the end of a process to start your,\n      you can use the Promise.all that execute all the processes in the same time.\n      To get the return of each process you will need to create a array to receive then,\n      then order the return like the order of the processes. */\n\n    const _ref = await Promise.all([api.get(\"/repos/\".concat(repoName)), api.get(\"/repos/\".concat(repoName, \"/issues\"))]),\n          _ref2 = _slicedToArray(_ref, 2),\n          repository = _ref2[0],\n          issues = _ref2[1];\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          repository = _this$state.repository,\n          issues = _this$state.issues,\n          loading = _this$state.loading;\n\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Carregando\");\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Owner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: repository.owner.avatar_url,\n      alt: repository.owner.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, repository.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, repository.description)));\n  }\n\n}\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      issues: PropTypes.string\n    })\n  }).isRequired\n};","map":{"version":3,"sources":["/home/kenzo/√Årea de Trabalho/Desktop/RocketSeat/GoStack08/Bootcamp/F03/First project Reactjs/src/pages/Repository/index.js"],"names":["React","Component","api","PropTypes","Container","Loading","Owner","Repository","state","repository","issues","loading","componentDidMount","match","props","repoName","decodeURIComponent","params","Promise","all","get","setState","data","render","owner","avatar_url","login","name","description","propTypes","shape","string","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,UAA/B;AAEA,eAAe,MAAMC,UAAN,SAAyBN,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAShDO,KATgD,GASxC;AACNC,MAAAA,UAAU,EAAE,EADN;AAENC,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,OAAO,EAAE;AAHH,KATwC;AAAA;;AAehD,QAAMC,iBAAN,GAA0B;AAAA,UAChBC,KADgB,GACN,KAAKC,KADC,CAChBD,KADgB;AAGxB,UAAME,QAAQ,GAAGC,kBAAkB,CAACH,KAAK,CAACI,MAAN,CAAaR,UAAd,CAAnC;AAEA;;;;;AALwB,iBASK,MAAMS,OAAO,CAACC,GAAR,CAAY,CAC7CjB,GAAG,CAACkB,GAAJ,kBAAkBL,QAAlB,EAD6C,EAE7Cb,GAAG,CAACkB,GAAJ,kBAAkBL,QAAlB,aAF6C,CAAZ,CATX;AAAA;AAAA,UASjBN,UATiB;AAAA,UASLC,MATK;;AAcxB,SAAKW,QAAL,CAAc;AACZZ,MAAAA,UAAU,EAAEA,UAAU,CAACa,IADX;AAEZZ,MAAAA,MAAM,EAAEA,MAAM,CAACY,IAFH;AAGZX,MAAAA,OAAO,EAAE;AAHG,KAAd;AAKD;;AAEDY,EAAAA,MAAM,GAAG;AAAA,wBACiC,KAAKf,KADtC;AAAA,UACCC,UADD,eACCA,UADD;AAAA,UACaC,MADb,eACaA,MADb;AAAA,UACqBC,OADrB,eACqBA,OADrB;;AAGP,QAAIA,OAAJ,EAAa;AACX,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AAED,WACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,EAAEF,UAAU,CAACe,KAAX,CAAiBC,UAA3B;AAAuC,MAAA,GAAG,EAAEhB,UAAU,CAACe,KAAX,CAAiBE,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKjB,UAAU,CAACkB,IAAhB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIlB,UAAU,CAACmB,WAAf,CAHF,CADF,CADF;AASD;;AApD+C;AAA7BrB,U,CACZsB,S,GAAY;AACjBhB,EAAAA,KAAK,EAAEV,SAAS,CAAC2B,KAAV,CAAgB;AACrBb,IAAAA,MAAM,EAAEd,SAAS,CAAC2B,KAAV,CAAgB;AACtBpB,MAAAA,MAAM,EAAEP,SAAS,CAAC4B;AADI,KAAhB;AADa,GAAhB,EAIJC;AALc,C","sourcesContent":["import React, { Component } from 'react';\nimport api from '../../services/api';\nimport PropTypes from 'prop-types';\n\nimport Container from '../../components/Container'\nimport { Loading, Owner } from './styles';\n\nexport default class Repository extends Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({\n        issues: PropTypes.string,\n      }),\n    }).isRequired,\n  }\n\n  state = {\n    repository: {},\n    issues: [],\n    loading: true,\n  }\n\n  async componentDidMount() {\n    const { match } = this.props;\n\n    const repoName = decodeURIComponent(match.params.repository);\n\n    /*When you have 2 or more async processes that do not depends the end of a process to start your,\n      you can use the Promise.all that execute all the processes in the same time.\n      To get the return of each process you will need to create a array to receive then,\n      then order the return like the order of the processes. */\n    const [repository, issues] = await Promise.all([\n      api.get(`/repos/${repoName}`),\n      api.get(`/repos/${repoName}/issues`),\n    ])\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false,\n    })\n  }\n\n  render() {\n    const { repository, issues, loading } = this.state;\n\n    if (loading) {\n      return <Loading>Carregando</Loading>\n    }\n\n    return (\n      <Container>\n        <Owner>\n          <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n          <h1>{repository.name}</h1>\n          <p>{repository.description}</p>\n        </Owner>\n      </Container>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}